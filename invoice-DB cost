WITH t1 AS
(
SELECT
	cast(invoice_no as VARCHAR) invoice_no
	, cast(invoice_issue_date as VARCHAR) invoice_issue_date
	, cast(cost_type as VARCHAR) as cost_type
	, cast(vendor_name as VARCHAR) as vendor_name
	, cast(original_country as VARCHAR) as original_country
	, cast(destination_country as VARCHAR) as destination_country
	, cast(carton_no as VARCHAR) carton_no
	, cast(sls_tracking_no as VARCHAR) as sls_tracking_no
	, cast(last_mile_tracking_no as VARCHAR) as last_mile_tracking_no
	, cast(mawb_no as VARCHAR) as mawb_no
--	, cast(shopee_mawb_no_check as VARCHAR) as shopee_mawb_no_check
	, cast(pickup_date as VARCHAR) as pickup_date
	, cast(flight_no as VARCHAR) as flight_no
	, cast(flight_date as VARCHAR) as flight_date
	, case when carton_quantity = 'Blank'  then  0
	        ELSE cast (carton_quantity as DOUBLE)
	       END as carton_quantity
	, case when parcel_quantity = 'Blank'  then  0
	        ELSE cast (parcel_quantity as DOUBLE)
	       END as parcel_quantity

	, cast(tp_type as VARCHAR) as tp_type
	, case when gross_weight = 'Blank'  then  0
	        ELSE cast (gross_weight as DOUBLE)
	       END as gross_weight
	, case when chargable_weight = 'Blank'  then  0
	        ELSE cast (chargable_weight as DOUBLE)
	       END as chargable_weight
	, case when transportation_cost = 'Blank'  then  0
	        ELSE cast (transportation_cost as DOUBLE)
	       END as transportation_cost
	, cast(transportation_currency as VARCHAR) as transportation_currency
	, case when cc_cost = 'Blank'  then  0
	        ELSE cast (cc_cost as DOUBLE)
	       END as cc_cost

	, cast(cc_currency as VARCHAR) as cc_currency
	, case when other_cost = 'Blank' then  0
	        ELSE cast (other_cost as DOUBLE)
	       END as other_cost

	, cast(other_currency as VARCHAR) as other_currency
	, case when duty_cost = 'Blank' then  0
	        ELSE cast (duty_cost as DOUBLE)
	       END as duty_cost
	, cast(duty_currency as VARCHAR) as duty_currency
	,  case when special_cost = 'Blank'  then  0
	        ELSE cast (special_cost as DOUBLE)
	       END as special_cost
	, cast(special_currency as VARCHAR) as special_currency
	,  case when paid_amount = 'Blank'  then  0
	        ELSE cast (paid_amount as DOUBLE)
	       END as paid_amount

	, cast(paid_currency as VARCHAR) as paid_currency
	, CAST(ingestion_timestamp AS bigint) as ingestion_timestamp
    , from_unixtime(CAST(ingestion_timestamp AS bigint)) as ingestion_time
FROM shopee_sz.shopee_sz_bi_team__fl_cc_invoice__done
--WHERE CAST(ingestion_timestamp AS bigint) = (SELECT max(CAST(ingestion_timestamp AS bigint)) FROM shopee_sz.shopee_sz_bi_team__fl_cc_invoice__done)
)

, t2 AS
	(
	SELECT *
	FROM
	(
	SELECT *, row_number() over (partition by vendor_name, cost_type, original_country, destination_country, tp_type, invoice_no, carton_no, mawb_no order by ingestion_timestamp DESC) rn
	from t1
	)
	WHERE rn = 1
		AND invoice_issue_date in 
		(
		'2021-02-28','2021-02-15','2021-02-28 00:00:00'
		)
	)



-- SELECT *
-- FROM t2 
-- WHERE special_cost > 0 or duty_cost > 0

, t3 as 
    (
	SELECT 
	t2.*
	, cast(sls.actual_weight as double)/1000 as sls_actual_weight
	, cast(sls.charged_weight as double)/1000 as sls_charged_weight
	FROM t2 
	LEFT JOIN (SELECT distinct mawb_no, tracking_no FROM shopee.shopee_regional_cb_team__mawb_mapping_tab) b on t2.mawb_no = cast(b.mawb_no as varchar)
	LEFT JOIN (SELECT distinct consignment_no, actual_weight, charged_weight FROM shopee_reg_cb_anlys.cb_logistics_mart_test) sls on cast(b.tracking_no as varchar) = sls.consignment_no
    )

, w as 
	(
	SELECT 
	COALESCE(vendor_name, '-') as vendor_name
	, COALESCE(cost_type, '-') as cost_type
	, COALESCE(original_country, '-') as original_country
	, COALESCE(destination_country, '-') as destination_country
	, COALESCE(tp_type, '-') as tp_type
	, sum(sls_actual_weight) as sls_actual_weight
	, sum(sls_charged_weight) as sls_charged_weight
	, COALESCE(transportation_currency, '-') as transportation_currency
	, COALESCE(cc_currency, '-') as cc_currency
	, COALESCE(other_currency, '-') as other_currency
	, COALESCE(duty_currency, '-') as duty_currency
	, COALESCE(special_currency, '-') as special_currency
	, COALESCE(paid_currency, '-') as paid_currency
	FROM t3
	group by 1, 2, 3, 4, 5, 8, 9 , 10, 11, 12, 13
	)

, s as 
	(
	SELECT 
	COALESCE(vendor_name, '-') as vendor_name
	, COALESCE(cost_type, '-') as cost_type
	, COALESCE(original_country, '-') as original_country
	, COALESCE(destination_country, '-') as destination_country
	, COALESCE(tp_type, '-') as tp_type
	, count(*) as record_number
	, sum(parcel_quantity) as parcel_qty
	, sum(carton_quantity) as carton_qty
	, sum(gross_weight) as gross_weight
	, sum(chargable_weight) as chargable_weight
	, sum(transportation_cost) as transportation_cost
	, COALESCE(transportation_currency, '-') as transportation_currency
	, sum(cc_cost) as cc_cost
	, COALESCE(cc_currency, '-') as cc_currency
	, sum(other_cost) as other_cost
	, COALESCE(other_currency, '-') as other_currency
	, sum(duty_cost) as duty_cost
	, COALESCE(duty_currency, '-') as duty_currency
	, sum(special_cost) as special_cost
	, COALESCE(special_currency, '-') as special_currency
	, sum(paid_amount) as paid_amount
	, COALESCE(paid_currency, '-') as paid_currency
	--, sum(sls_actual_weight) as sls_actual_weight
	--, sum(sls_charged_weight) as sls_charged_weight
	FROM t2
	group by 1, 2, 3, 4, 5, 12, 14, 16, 18, 20, 22
	)

SELECT 
	s.vendor_name
	, s.cost_type
	, s.original_country
	, s.destination_country
	, s.tp_type
	, record_number
	, parcel_qty
	, carton_qty
	, gross_weight
	, chargable_weight
	, transportation_cost
	, s.transportation_currency
	, cc_cost
	, s.cc_currency
	, other_cost
	, s.other_currency
	, duty_cost
	, s.duty_currency
	, special_cost
	, s.special_currency
	, paid_amount
	, s.paid_currency
	, sls_actual_weight
	, sls_charged_weight
FROM s 
LEFT JOIN w on s.vendor_name = w.vendor_name 
	and s.cost_type = w.cost_type 
	and s.original_country = w.original_country 
	and s.destination_country = w.destination_country
	and s.tp_type = w.tp_type
	and s.transportation_currency = w.transportation_currency
	and s.cc_currency = w.cc_currency
	and s.other_currency = w.other_currency
	and s.duty_currency = w.duty_currency
	and s.special_currency = w.special_currency
	and s.paid_currency = w.paid_currency
order by 1, 2, 3, 4
